<!-- 
  An abstract "base" Ant build file that can be extended by all of the JiBX/WS examples.

  Build files can use the "import" task to extend this build file. Build files that import this file are expected to set
  at least the following properties:
    jibxws.examples.dir - the directory at which this common.xml file is located   
    client.classname  - the name of the example client Java class
    warname           - the name to be used for the example's war file (excluding the ".war" extension)
    binding.fileset   - a fileset containing the JiBX binding definition files for the example

  This build file assumes the following standard directory structure under each example directory:
  
  build/build.xml        <- can override or add properties and targets used by this build file, imports this build file
  build/src/common       <- contains the data classes and binding files required by both client and server
  build/src/client       <- contains classes specific to the client
  build/src/server       <- contains classes and other files, such as web.xml, that are specific to the server 
  
  The standard directory structure can be overridden by overriding the properties defined in this build file.
  
  This build file has been tested with Ant version 1.6.5.
 -->
<project name="JiBX/WS Examples common" default="build" basedir=".">

  <property name="root" value="${basedir}" description="Root directory of example" />
  
  <property file="${jibxws.examples.dir}/build.properties" />
  <property environment="env" />

  <!-- The following block is intended to set the jibx.lib.dir location. 
   It checks for the JiBX libraries in the the following order, setting jibx.lib.dir to 
   the first directory containing the JiBX libraries:
   1) in the dep-lib directory of the JiBX/WS distribution (jibxws/dep-lib)
   2) in the lib directory of the parent directory of the JiBX/WS distribution 
     (for the case where JiBX/WS is installed as a child directory of JiBX) (jibxws/../lib)
   3) in the lib subdirectory of the directory referenced by JIBX_HOME environmental variable ($JIBX_HOME/lib)
   If you prefer to just set the path directly in this file, uncomment the following
   line and set the value to the appropriate directory, then delete the rest of the Ant
   commands down to the end of this block. -->
<!--  <property name="jibx.lib.dir" value="jibx-home-directory-path/lib"/> -->
  <available file="${jibxws.lib.dir}/jibx-bind.jar" property="jibx.lib.dir" value="${jibxws.lib.dir}"/>
  <property name="jibxws.parent.dir" location="${jibxws.dir}/.."/>
  <condition property="jibx.lib.dir" value="${jibxws.parent.dir}/lib">
    <and>
      <not>
        <isset property="jibx.lib.dir"/>
      </not>
      <available file="${jibxws.parent.dir}/lib/jibx-bind.jar"/>
    </and>
  </condition>
  <condition property="jibx.lib.dir" value="${env.JIBX_HOME}/lib">
    <and>
      <not>
        <isset property="jibx.lib.dir"/>
      </not>
      <available file="${env.JIBX_HOME}/lib"/>
    </and>
  </condition>
  <property name="resolved.jibxws.lib.dir" location="${jibxws.lib.dir}"/>
  <fail unless="jibx.lib.dir" 
     message="Unable to find JiBX libraries in the following locations:${line.separator}
  1) ${resolved.jibxws.lib.dir}${line.separator}
  2) ${jibxws.parent.dir}/lib${line.separator}
  3) lib subdirectory of directory referenced by JIBX_HOME environment variable (which resolves to ${env.JIBX_HOME}/lib)${line.separator}
${line.separator}
  To correct this, either:${line.separator}
  1) run 'ant retrieve' (without the quotes) from the jibxws/build directory to download the dependencies, or${line.separator}
  2) install JiBX/WS in a direct subdirectory of the JiBX distribution, or${line.separator}
  3) set the environment variable JIBX_HOME to reference an existing JiBX distribution, or${line.separator}
  4) download the 'with-deps' JiBX/WS distribution, which contains all of the dependent jar files"
  />
  <echo level="debug">JiBX library directory set to ${jibx.lib.dir}</echo>

  <!-- Directories and files -->
  <property name="src.dir" value="${root}/src" description="Root directory of example source code" />
  <property name="common.src.includes" value="**/common/*.*" description="Source files common to client and server" />
  <property name="client.src.includes" value="**/client/*.*" description="Source files specific to client" />
  <property name="server.src.includes" value="**/server/*.*" description="Source files specific to server"/>
  <property name="web-inf.file.includes" value="**/server/*.xml, **/server/*.xsd" description="Files to include in WEB-INF directory"/>
  <property name="client.file.includes" value="" description="Additional files to include in client classes directory"/>
  <property name="server.file.includes" value="" description="Additional files to include in WEB-INF/classes directory"/>
  <property name="client.dest.dir" value="${basedir}/classes" />
  <property name="war.dir" value="${basedir}" />
  <property name="web-inf.dir" location="${war.dir}/WEB-INF" />
  <property name="war.lib.dir" location="${web-inf.dir}/lib" />
  <property name="war.file" value="${warname}.war" />
  <property name="war.path" location="${war.dir}/${war.file}" />
  <property name="server.dest.dir" value="${web-inf.dir}/classes" />
  <property name="docs" value="${basedir}/docs" />
  
  <!-- Client classpath -->
  <path id="client-classpath">
    <pathelement location="${client.dest.dir}" />
    <pathelement location="${jibxws.dist.dir}/jibx-ws.jar" />
    <pathelement location="${jibx.lib.dir}/jibx-run.jar" />
    <!-- xpp3.jar only required if using the XPP3 XMLPullParser. -->
    <!--pathelement location="${jibx.lib.dir}/xpp3.jar" /-->
    <!-- wstx-asl.jar only required if using the woodstox parser. -->
    <!-- pathelement location="${jibx.lib.dir}/wstx-asl.jar" / -->
    <!-- xbis-jibx.jar only required if using the XBIS encoding format -->
    <pathelement location="${jibx.lib.dir}/xbis-jibx.jar" />
    <pathelement location="${jibxws.lib.dir}/commons-logging.jar" />
    <!-- log4j.jar only required if using log4j with commons-logging -->
    <pathelement location="${jibx.lib.dir}/log4j-api.jar" />
    <pathelement location="${jibx.lib.dir}/log4j-core.jar" />
    <pathelement location="${jibx.lib.dir}/log4j-1.2-api.jar" />
    <path refid="client-classpath-ext"/>
  </path>

  <!-- Server classpath -->
  <path id="server-classpath">
    <pathelement location="${server.dest.dir}" />
    <pathelement location="${jibxws.dist.dir}/jibx-ws.jar" />
    <pathelement location="${jibx.lib.dir}/jibx-run.jar" />
    <pathelement location="${jibxws.lib.dir}/servletapi.jar" />
    <pathelement location="${jibxws.lib.dir}/commons-logging.jar" />
  </path>

  <!-- JiBX binding compiler task definition -->
  <taskdef name="bind" classname="org.jibx.binding.ant.CompileTask">
    <classpath>
      <pathelement location="${jibx.lib.dir}/bcel.jar" />
      <pathelement location="${jibx.lib.dir}/jibx-bind.jar" />
      <pathelement location="${jibx.lib.dir}/jibx-run.jar" />
      <pathelement location="${jibx.lib.dir}/xpp3.jar" />
    </classpath>
  </taskdef>

  <!-- Say hello -->
  <target name="hello" description="Echoes name of example and build file location">
    <echo>${ant.project.name} at ${ant.file}</echo>
  </target>

  <!-- Delete existing client class files -->
  <target name="clean-client">
    <delete dir="${client.dest.dir}" />
  </target>

  <target name="-init">
    <path id="client-classpath-ext"/>
  </target>
  
  <!-- Compile and bind the client project -->
  <target name="compile-client" depends="-init">
    <mkdir dir="${client.dest.dir}" />
    <javac srcdir="${src.dir}"
           includes="${common.src.includes},${client.src.includes}"
           destdir="${client.dest.dir}"
           deprecation="on"
           debug="on"
           optimize="on">
      <classpath refid="client-classpath" />
    </javac>
    <bind>
      <classpath refid="client-classpath" />
      <bindingfileset refid="binding.fileset"/>
    </bind>
    <copy todir="${client.dest.dir}">
      <fileset dir="${jibxws.examples.dir}" includes="*.properties" />
    </copy>
    <copy todir="${client.dest.dir}">
      <fileset dir="${src.dir}" includes="*.properties" />
    </copy>
    <copy todir="${client.dest.dir}" flatten="true" includeemptydirs="false">
      <fileset dir="${src.dir}" includes="${client.file.includes}" />
    </copy>
  </target>

  <!-- Run the test client -->
  <target name="run" description="Runs client class" depends="-init">
    <java classname="${client.classname}" classpathref="client-classpath" fork="true">
      <arg value="${target.protocol}://${target.host}:${target.port}" />
      <arg value="${webapp.path}" />
    </java>
  </target>

  <!-- Delete existing server class files -->
  <target name="clean-server">
    <delete dir="${web-inf.dir}" />
    <delete file="${war.path}" />
  </target>

  <!-- Compile and bind the server project -->
  <target name="compile-server">
    <mkdir dir="${server.dest.dir}" />
    <javac srcdir="${src.dir}"
           includes="${common.src.includes},${server.src.includes}"
           destdir="${server.dest.dir}"
           deprecation="on"
           debug="on"
           optimize="on">
      <classpath refid="server-classpath" />
    </javac>
    <bind>
      <classpath refid="server-classpath" />
      <bindingfileset refid="binding.fileset"/>
    </bind>
  </target>

  <!-- Build the war file for distribution -->
  <target name="war" depends="compile-server">
    <mkdir dir="${war.lib.dir}" />
    <delete file="${war.dir}/${warname}.war" quiet="true" />
    <copy todir="${web-inf.dir}" flatten="true">
      <fileset dir="${src.dir}" includes="${web-inf.file.includes}" />
    </copy>
    <copy todir="${server.dest.dir}" flatten="true">
      <fileset dir="${src.dir}" includes="${server.file.includes}" />
    </copy>

    <!-- Copy dependent jar files -->
    <copy file="${jibxws.dist.dir}/jibx-ws.jar" todir="${war.lib.dir}" />
    <copy file="${jibx.lib.dir}/jibx-run.jar" todir="${war.lib.dir}" />
    <copy file="${jibx.lib.dir}/jibx-extras.jar" todir="${war.lib.dir}" />
    <!-- xbis-jibx.jar only required if using the XBIS encoding format -->
    <copy file="${jibx.lib.dir}/xbis-jibx.jar" todir="${war.lib.dir}" />
    <!-- xpp3.jar only required if using the XPP3 XMLPullParser. -->
    <copy file="${jibx.lib.dir}/xpp3.jar" todir="${war.lib.dir}" />
    <!-- wstx-asl.jar only required if using the woodstox parser. -->
    <!--copy file="${jibx.lib.dir}/wstx-asl.jar" todir="${war.lib.dir}" /-->
    <copy file="${jibxws.lib.dir}/commons-logging.jar" todir="${war.lib.dir}" />
    <!-- log4j.jar only required if using log4j with commons-logging -->
    <copy file="${jibx.lib.dir}/log4j-api.jar" todir="${war.lib.dir}" />
    <copy file="${jibx.lib.dir}/log4j-core.jar" todir="${war.lib.dir}" />
    <copy file="${jibx.lib.dir}/log4j-1.2-api.jar" todir="${war.lib.dir}" />

    <!-- Copy properties files -->
    <copy todir="${server.dest.dir}">
      <fileset dir="${jibxws.examples.dir}" includes="*.properties" />
    </copy>
    
    <antcall target="-war-ext"/>
    
    <jar destfile="${war.path}" basedir="${basedir}" includes="WEB-INF/**" />
    <delete file="${war.lib.dir}/*.jar" />
  </target>

  <target name="-war-ext"/>

  <!-- Build the javadocs -->
  <target name="javadoc" description="Builds javadoc documentation">
    <mkdir dir="${docs}" />
    <javadoc sourcepath="${src.dir}"
             destdir="${docs}"
             author="true"
             version="true"
             noindex="true"
             nohelp="true"
             notree="true"
             windowtitle="${ant.project.name}"
             doctitle="${ant.project.name}"
             bottom="&lt;table width='80%%'&gt;&lt;tr&gt;&lt;td width='50%%'&gt;&lt;p align='center'&gt;&lt;/td&gt;&lt;td width='50%%'&gt;&lt;p align='center'&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;">
      <classpath refid="client-classpath" />
    </javadoc>
  </target>

  <target name="deploy-tomcat" description="Copies war file to Tomcat's webapps directory">
    <copy file="${war.path}" todir="${env.CATALINA_HOME}/webapps" verbose="on" />
  </target>

  <target name="clean-tomcat" description="Removes the webapp from Tomcat">
    <delete dir="${env.CATALINA_HOME}/webapps/${warname}" />
    <delete file="${env.CATALINA_HOME}/webapps/${war.file}" />
  </target>

  <target name="build-server" depends="clean-server,compile-server,war" description="Builds server"/>
  <target name="build-client" depends="clean-client,compile-client" description="Builds client"/>
  <target name="clean" depends="clean-client,clean-server" description="Cleans all output">
    <delete dir="${docs}" />
    <delete file="jibx.log" />
  </target>
  <target name="build" depends="build-server,build-client" description="Builds client and server"/>

</project>
